"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}


type Category {
  id: ID!
  name: String! @rules(apply: ["unique:categories,name"])
  books: [Book] @belongsTo
}

type Book {
  id: ID!
  title: String!
  author: String!
  categories: [Category!]! @belongsTo
}

type Query {
  categories: [Category] @all
  category(id: ID @eq): Category @find

  books: [Book] @all
  book(id: ID @eq): Book @find
  booksByPartialTitle(search: String!): [Book]
  totalBooksCount(categoryId: ID): Int! 
}

type Mutation {
  createCategory(name: String! @rules(apply: ["unique:categories,name"])): Category! @create 
  updateCategory(id: ID!, name: String! @rules(apply: ["unique:categories,name"])): Category! @update
  deleteCategory(id: ID! @whereKey): Category! @delete

  createBook(title: String!, author: String!): Book! @create
  assignBookCategoryByName(bookId: ID!, categoryName: String!): Book!
  updateBook(id: ID!, title: String, author: String @rules(apply: ["sometimes","min:4"])): Book! @update
  unassignBookCategoryByName(bookId: ID!, categoryName: String!): Book!
  deleteBook(id: ID! @whereKey): Book! @delete
}